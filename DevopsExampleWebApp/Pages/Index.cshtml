@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<style>
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden;
        background: linear-gradient(to bottom, #000014, #000033);
        font-family: 'Arial', sans-serif;
        cursor: default;
    }

    #welcome-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 10;
    }

    #welcome-text {
        color: #e0e0ff;
        font-size: 4rem;
        font-weight: bold;
        text-shadow: 0 0 20px rgba(100,150,255,0.7);
    }
</style>

<div id="welcome-container">
    <h1 id="welcome-text">Welcome Digital Engineering</h1>
</div>

<script>
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Create starfield background
    const starGeometry = new THREE.BufferGeometry();
    const starMaterial = new THREE.PointsMaterial({ color: 0xffffff, size: 0.1 });
    const starVertices = [];

    for (let i = 0; i < 10000; i++) {
        const x = (Math.random() - 0.5) * 200;
        const y = (Math.random() - 0.5) * 200;
        const z = (Math.random() - 0.5) * 200;
        starVertices.push(x, y, z);
    }

    starGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starVertices, 3));
    const stars = new THREE.Points(starGeometry, starMaterial);
    scene.add(stars);

    // Asteroid geometries
    const geometries = [
        new THREE.IcosahedronGeometry(1, 1),
        new THREE.DodecahedronGeometry(1, 1),
        new THREE.TetrahedronGeometry(1, 1)
    ];

    // URLs for clickable asteroids
    const urls = [
        "https://www.anthropic.com",
        "https://www.github.com",
        "https://www.openai.com",
        // "https://www.microsoft.com",
        // "https://www.google.com",
        // "https://www.apple.com",
        // "https://www.amazon.com",
        // "https://www.twitter.com",
        // "https://www.facebook.com",
        // "https://www.linkedin.com"
    ];

    const normalMaterial = new THREE.MeshStandardMaterial({
        color: 0x555555,
        roughness: 0.8,
        metalness: 0.2
    });

    // Clickable asteroids are yellow
    const clickableMaterial = new THREE.MeshStandardMaterial({
        color: 0xffff00,
        emissive: 0xffff00,
        emissiveIntensity: 0.5,
        roughness: 0.5,
        metalness: 0.3
    });

    const objects = [];
    const clickableObjects = [];

    // Increase the number of asteroids to 100
    // Make first 3 asteroids clickable
    for (let i = 0; i < 100; i++) {
        const geometry = geometries[Math.floor(Math.random() * geometries.length)];
        const material = i < 3 ? clickableMaterial : normalMaterial;

        const mesh = new THREE.Mesh(geometry, material);

        mesh.position.set(
            Math.random() * 100 - 50,
            Math.random() * 100 - 50,
            Math.random() * -100 - 10
        );

        mesh.rotation.x = Math.random() * Math.PI;
        mesh.rotation.y = Math.random() * Math.PI;
        mesh.scale.multiplyScalar(Math.random() * 0.5 + 0.5);

        scene.add(mesh);
        objects.push(mesh);

        if (i < 3) {
            mesh.userData.clickable = true;
            mesh.userData.url = urls[i % urls.length];
            clickableObjects.push(mesh);
        }
    }

    const ambientLight = new THREE.AmbientLight(0x202040, 0.5);
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0xffffff, 1, 100);
    pointLight.position.set(0, 0, 10);
    scene.add(pointLight);

    camera.position.z = 5;

    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    function onMouseClick(event) {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObjects(clickableObjects);

        if (intersects.length > 0) {
            window.open(intersects[0].object.userData.url, '_blank');
        }
    }

    function onMouseMove(event) {
        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

        raycaster.setFromCamera(mouse, camera);
        const intersects = raycaster.intersectObjects(clickableObjects);

        document.body.style.cursor = intersects.length > 0 ? 'pointer' : 'default';
    }

    function animate() {
        requestAnimationFrame(animate);

        stars.rotation.y += 0.0001;

        objects.forEach((obj, index) => {
            obj.rotation.x += 0.005 * (index % 2 === 0 ? 1 : -1);
            obj.rotation.y += 0.005 * (index % 3 === 0 ? -1 : 1);
        });

        renderer.render(scene, camera);
    }

    function handleResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    renderer.domElement.addEventListener('click', onMouseClick, false);
    renderer.domElement.addEventListener('mousemove', onMouseMove, false);
    window.addEventListener('resize', handleResize, false);

    animate();
</script>